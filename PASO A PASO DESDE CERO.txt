Paso 1) Conectar al git para añadirlo al repositorio

-- git init
-- npm init -y -> el -y genera una configuracion ya definida
--- npm install react react-dom
---- creamos carpetas y archivos: 
public
 - Index.html
src
 - components - App.jsx
 - Index.js

---- Configuramos y conectamos todo Index.html - Index.js -- App.jsx

Paso 2) Instalacion de Webpack y Babel: presets, plugin y loaders
--- npm i webpack webpack-cli webpack-dev-server --save-dev
--- npm i html-webpack-plugin html-loader --save-dev
--- npm i babel-loader @babel/preset-env @babel/preset-react @babel/core --save-dev
--- npm i css-loader mini-css-extract-plugin sass-loader node-sass --save-dev 

Paso 3) Configuracion de webpack 5 y webpack-dev-server
--- creamos archivo webpack.config.js 
---- importamos path, html-webpack-plugin, mini-css-extract-plugin
----- configuramos

const path = require("path");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const MiniCssExtractPlugin = require("mini-css-extract-plugin");

module.exports = {
    entry: "./src/index.js",
    output: {
        path: path.resolve(__dirname, "dist"),
        filename: "bundle.js",
    },
    resolve: {
        extensions: [".js", "jsx"],
    },
    module: {
        rules: [
            {
                test: /\.(js|jsx)$/,
                exclude: /node_modules/,
                use: {
                    loader: "babel-loader",
                },
            },
            {
                test: /\.html$/,
                use: [
                    {
                        loader: "html-loader",
                    },
                ],
            },
            {
                test: /\.css$/,
                use: [
                    {
                        loader: MiniCssExtractPlugin.loader,
                    },
                    'css-loader'
                ],
            },
        ],
    },
    plugins: [
        new HtmlWebpackPlugin({
            template: "./public/index.html",
            filename: "./index.html",
        }),
        new MiniCssExtractPlugin({
            filename: "assets/[name].css",
        })
    ],
    devServer: {
        static: {
            directory: path.join(__dirname, "dist")
        },
        compress: true,
        open: true,
        port: 3005
    }
};


----- luego creamos un archivo .babelrc para añadir las configuraciones que necesitamos.

{
 "presets": [
  "@babel/preset-env", -> compila ECMAScript y ECMAScript6
  "@babel/preset-react" -> compila JS y sintaxis ReactJS
 ]
}

----- luego vamos a package.json y configuramos start y build
"scripts": {
  "start": "webpack serve --mode development",
  "build": "webpack --mode production"
},


Paso 4) Flujo de desarrollo seguro y consistente con ESLint y Prettier

--- primero instalamos ESLint de forma global
---- npm i -g eslint
--- ahora lo instalaremos en nuestro proyecto 
---- npm i eslint babel-eslint eslint-config-airbnb eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react
--- creamos un archivo en nuestra raiz .eslintrc y configuramos

{
  "extends": ["airbnb", "prettier"],
  // nos ayudam a optimizar nuestro codigo
  "plugins": ["prettier"],
  // son un estandar para que el codigo cumpla un objetivo claro y que maneje un formato establecido con las mejores caracteristicas del codigo
  "rules": {
    "react/jsx-filename-extension": [
      1,
      {
        "extensions": [".js", ".jsx"]
      }
    ],
    "react/prop-types": 0,
    "no-underscore-dangle": 0,
    "import/imports-first": ["error", "absolute-first"],
    "import/newline-after-import": "error"
  },
  // son formas en la que podemos trabajar con diferentes archivos
  "globals": {
    "window": true,
    "document": true,
    "localStorage": true,
    "FormData": true,
    "FileReader": true,
    "Blob": true,
    "navigator": true
  },
  "parser": "babel-eslint" // va a identificar todo lo que va hacer nuestro producto
}

---- instalar lo que necesitamos para trabajar con prettier
--- npm i prettier eslint-plugin-prettier eslint-config-prettier
---- creamos un archivo en nuestra raiz como .prettierrc y luego vamos al package.json y configuramos para formatear y estructurar nuestro codigo.
.prettierrc

{
    "trailingComma": "es5",
    "semi": true,
    "singleQuote": true
}

package.json

"scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "start": "webpack serve --mode development",
        "build": "webpack --mode production",
        "format": "prettier --write '{*.js,src/**/*.{js,jsx}}'",
        "lint": "eslint src/ --fix"
    },

 


